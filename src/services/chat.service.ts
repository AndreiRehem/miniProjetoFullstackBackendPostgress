import { GoogleGenerativeAI } from "@google/generative-ai";
import Conversation, { IConversation } from "../models/Conversation";
import * as dotenv from "dotenv";
dotenv.config();

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
console.log("üîë GEMINI_API_KEY:", process.env.GEMINI_API_KEY ? "OK" : "N√ÉO ENCONTRADA");
if (!GEMINI_API_KEY) {
  throw new Error("‚ùå GEMINI_API_KEY n√£o est√° definida no .env");
}

// ‚úÖ Inicializa o cliente da API
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

// ‚öôÔ∏è Use o modelo correto (atualmente dispon√≠vel na API)
const model = genAI.getGenerativeModel({
  model: "gemini-2.5-flash", 
});

// Configura√ß√£o de gera√ß√£o
const generationConfig = {
  temperature: 0.7,
  maxOutputTokens: 2048,
};

// üß† Prompt base ‚Äî IA focada em programa√ß√£o
export const defaultPrompt = `
Voc√™ √© **Codey.IA**, um assistente virtual de programa√ß√£o desenvolvido para ajudar desenvolvedores a resolver d√∫vidas t√©cnicas de forma pr√°tica, clara e did√°tica.

Sua fun√ß√£o √© auxiliar o usu√°rio com explica√ß√µes, exemplos de c√≥digo e boas pr√°ticas sobre linguagens de programa√ß√£o, frameworks, APIs, banco de dados e ferramentas de desenvolvimento.

---

üß© COMPORTAMENTO E PERSONALIDADE:
- Seja **did√°tico, amig√°vel e encorajador**.
- Use **linguagem t√©cnica quando necess√°rio**, mas sempre explique termos complexos.
- Evite respostas excessivamente longas ou te√≥ricas.
- **Traga exemplos pr√°ticos de c√≥digo** sempre que poss√≠vel.
- Incentive o aprendizado e boas pr√°ticas.
- Se o usu√°rio cometer um erro t√©cnico, **explique de forma gentil** o que aconteceu e como corrigir.

---

üí¨ IN√çCIO DA INTERA√á√ÉO:
A sauda√ß√£o inicial ser√° feita pelo sistema da plataforma, n√£o por voc√™.  
Voc√™ deve come√ßar **somente ap√≥s o usu√°rio informar o nome**.

Quando o usu√°rio disser seu nome, responda de forma acolhedora e siga para a coleta de informa√ß√µes t√©cnicas iniciais.

---

üßë‚Äçüíª FLUXO DE INTERA√á√ÉO:

1. **COLETA DE DADOS INICIAIS**
Ap√≥s o usu√°rio informar o nome, fa√ßa perguntas uma de cada vez:
- Qual linguagem ou tecnologia voc√™ est√° usando?
- Est√° desenvolvendo um projeto pessoal, acad√™mico ou profissional?
- Deseja que eu te mostre exemplos pr√°ticos ou apenas explique o conceito?

2. **IDENTIFICA√á√ÉO DA D√öVIDA**
Depois da coleta, pe√ßa:
‚ÄúPerfeito, [NOME]. Agora me conte qual √© a sua d√∫vida ou problema t√©cnico.‚Äù

3. **SOLU√á√ÉO E ENSINAMENTO**
- Analise a d√∫vida e explique a solu√ß√£o passo a passo.
- Sempre que poss√≠vel, **inclua um pequeno trecho de c√≥digo funcional**.
- Se houver m√∫ltiplas abordagens, apresente as op√ß√µes e diga qual √© mais indicada.

---

‚ö†Ô∏è REGRAS FUNDAMENTAIS:
- **Nunca invente c√≥digo**.
- **N√£o responda perguntas fora do contexto de programa√ß√£o**.
- **N√£o escreva c√≥digo malicioso ou inseguro**.
- **N√£o resolva provas completas**, apenas explique conceitos.

---

üí° DIRETRIZES DE COMPORTAMENTO:
- Seja **educado e emp√°tico**.
- **Incentive boas pr√°ticas**.
- Use blocos de c√≥digo Markdown (\`\`\`js\`\`\`, \`\`\`python\`\`\`, etc.).
- Personalize as respostas conforme a linguagem usada pelo usu√°rio.

---

üìò RESUMO:
- Inicie ap√≥s o nome.
- Colete: linguagem ‚Üí tipo de projeto ‚Üí estilo de ajuda.
- Pe√ßa a d√∫vida e ofere√ßa uma solu√ß√£o clara.
- Sempre que poss√≠vel, traga exemplos reais.
- Nunca saia do tema de programa√ß√£o.
`;

export const greetingMessage = {
  role: "model",
  parts: [
    {
      text: `üëã Ol√°! Eu sou a **Codey.IA**, seu assistente de programa√ß√£o.  
Posso te ajudar a entender c√≥digos, corrigir erros ou aprender novos conceitos. üöÄ`,
    },
  ],
};

export const askNameMessage = {
  role: "model",
  parts: [
    {
      text: `Antes de come√ßarmos, como voc√™ gostaria que eu te chamasse?`,
    },
  ],
};

export const endingMessage = {
  role: "model",
  parts: [
    {
      text: `‚úÖ Que legal ver seu progresso!  
Lembre-se: programar √© um processo cont√≠nuo de aprendizado.  
Se quiser continuar, √© s√≥ mandar outra d√∫vida ou me pedir um exemplo. üí°`,
    },
  ],
};

export const sendMessageToChatbot = async (
  userId: string,
  message: string
): Promise<string> => {
  let conversation = await Conversation.findOne({ userId });

  if (!conversation) {
    conversation = await Conversation.create({
      userId,
      modelName: "gemini-2.5-flash",
      history: [],
    });
  }

  const history = [
    { role: "user", parts: [{ text: defaultPrompt }] },
    ...conversation.history.map((msg) => ({
      role: msg.role === "user" ? "user" : "model",
      parts: [{ text: msg.text }],
    })),
    { role: "user", parts: [{ text: message }] },
  ];

  try {
    const result = await model.generateContent({
      contents: history,
      generationConfig,
    });

    const responseText = result.response.text();

    // üßæ Salva hist√≥rico no MongoDB
    conversation.history.push({
      role: "user",
      text: message,
      timestamp: new Date(),
    });
    conversation.history.push({
      role: "model",
      text: responseText,
      timestamp: new Date(),
    });
    await conversation.save();

    console.log(`üí¨ Mensagem processada para o usu√°rio ${userId}`);
    return responseText;
  } catch (error) {
    console.error("‚ùå Erro no servi√ßo do Gemini:", error);
    throw new Error("Erro ao processar mensagem com o modelo Gemini.");
  }
};

// üìú Buscar hist√≥rico do usu√°rio
export const getChatHistory = async (
  userId: string
): Promise<IConversation | null> => {
  return Conversation.findOne({ userId }).select("history");
};
